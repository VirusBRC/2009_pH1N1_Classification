package algo::H1N1NewPand;

use strict;
use warnings;
use util::blastf;
use File::Basename;
use util::Utils;
use algo::Algo;

our @ISA = qw(algo::Algo);


sub getClassification{

    my $self = shift;

    my $sequenceFile = shift;

    my $resultFile = "$sequenceFile.result.tmp";

    my $blastCmd = $self->{"blastall"};
    
    $blastCmd =~ s/<INPUTFILE>/$sequenceFile/;
    my $blastResult =  `$blastCmd`;

    print $blastResult if $self->{"blastout"} ;

    my @perc=();
    my @Types=();

    my %count =();


    foreach my $row (split( /[\n\r]/, $blastResult)){
        
        my ( $n , $accession,  $percid, $cov ) = split( /\t/, $row );
        
        push(@perc,util::Utils::trim($percid));

        my $type = $self->getLookup($accession);

        push (@Types, $type);
    
	if($type) {
          $count{$type} ++;
	}
    }

    unless( defined $perc[0]){

        warn "$blastResult";
        return undef;
    }

    if (( keys %count) == 1){
        
        return ($perc[0] < 97) ? "U1" : $Types[0];

    }else {
        return ($perc[0] < 98) ? "U2" : $Types[0];
    }


}


1;
